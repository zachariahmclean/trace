% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/call_repeats.R
\name{call_repeats}
\alias{call_repeats}
\title{Call Repeats for Fragments}
\usage{
call_repeats(
  fragments_list,
  assay_size_without_repeat = 87,
  repeat_size = 3,
  force_whole_repeat_units = FALSE,
  batch_correction = FALSE,
  repeat_calling_algorithm = "simple",
  repeat_calling_algorithm_size_window_around_allele = repeat_size * 5,
  repeat_calling_algorithm_peak_assignment_scan_window = 3,
  repeat_calling_algorithm_size_period = repeat_size * 0.93
)
}
\arguments{
\item{fragments_list}{A list of fragments_repeats objects containing fragment data.}

\item{assay_size_without_repeat}{An integer specifying the assay size without repeat for repeat calling. This is the length of the sequence flanking the repeat in the PCR product.}

\item{repeat_size}{An integer specifying the repeat size for repeat calling. Default is 3.}

\item{force_whole_repeat_units}{A logical value specifying if the peaks should be forced to be whole repeat units apart. Usually the peaks are slightly under the whole repeat unit if left unchanged.}

\item{batch_correction}{A logical specifying if the size should be adjusted across fragment analysis runs. Requires metadata to be added to specify samples (\code{"batch_sample_id"}) common across runs (\code{"batch_run_id"})(see \code{\link[=add_metadata]{add_metadata()}}).}

\item{repeat_calling_algorithm}{A character specifying the repeat calling algorithm. Options: \code{"simple"}, \code{"fft"}, or \code{"size_period"} (see details section for more information on these).}

\item{repeat_calling_algorithm_size_window_around_allele}{A numeric value for how big of a window around the tallest peak should be used to find the peak periodicity. Used for both \code{"fft"} and \code{"size_period"}. For \code{"fft"}, you want to make sure that this window is limited to where there are clear peaks. For \code{"size_period"}, it will not make a big difference.}

\item{repeat_calling_algorithm_peak_assignment_scan_window}{A numeric value for the scan window when assigning the peak. This is used for both \code{"fft"} and \code{"size_period"}. When the scan period is determined, the algorithm jumps to the predicted scan for the next peak. This value opens a window of the neighboring scans to pick the tallest in.}

\item{repeat_calling_algorithm_size_period}{A numeric value \code{"size_period"} algorithm to set the peak periodicity by bp size. This is the key variable to change for \code{"size_period"}. In fragment analysis, the peaks are usually slightly below the actual repeat unit size.}
}
\value{
A list of \code{"fragments_repeats"} objects with repeat data added.
}
\description{
This function calls the repeat lengths for a list of fragments.
}
\details{
Repeat lengths are calculated from the bp size with several different alternative algorithm or options.

The \code{force_whole_repeat_units} option aims to correct for the systematic underestimation in fragment sizes that occurs in capillary electrophoresis. It is independent to the algorithms described below and can be used in conjunction. It modifies repeat lengths in a way that helps align peaks with the underlying repeat pattern, making the repeat lengths whole units (rather than ~0.9 repeats). The calculated repeat lengths start from the main peak's repeat length and increases in increments of the specified \code{repeat_size} in either direction.

\code{batch_correction} involves using common sample(s) across fragment analysis runs to correct systematic batch effects that occur with repeat-containing amplicons in capillary electrophoresis. There are slight fluctuations of size across runs for amplicons containing repeats that result in systematic differences, so if samples are to be analyzed for different runs, the absolute bp size is not comparable unless this batch effect is corrected. This is only relevant when the absolute size of a amplicons are compared for grouping metrics as described in \code{\link[=assign_index_peaks]{assign_index_peaks()}} and \code{\link[=add_metadata]{add_metadata()}} (otherwise instability metrics are all relative and it doesn’t matter that there’s systematic batch effects across runs). This correction can be achieved by running a couple of samples in every fragment analysis run, or having a single run that takes a couple of samples from every run together, thereby linking them. These samples are then indicated in the metadata with \code{batch_run_id} (to group samples by fragment analysis run) and \code{batch_sample_id} (to enable linking samples across batches).

The \code{simple} algorithm is just the repeat size calculated directly from bp. The \code{fft} or \code{size_period} algorithms both re-call the peaks based on empirically determined (\code{fft}) or specified (\code{size_period}) periodicity of the peaks. The main application of these algorithms is to solve the issue of contaminating peaks in the expected regular pattern of peaks. The \code{fft} approach applies a fourier transform to the peak signal to determine the underlying periodicity of the signal. \code{size_period} is similar and simpler, where instead of automatically figuring out the periodicity, we as users specify the periodicity (since we usually know the size distance between repeat units). We can use the periodicity to jump between peaks.
}
\examples{

file_list <- trace::cell_line_fsa_list[c(90:92)]

test_ladders <- find_ladders(file_list)

fragments_list <- find_fragments(test_ladders,
  min_bp_size = 300
)

test_alleles <- find_alleles(
  fragments_list = fragments_list
)

# Simple conversion from bp size to repeat size
test_repeats <- call_repeats(
  fragments_list = test_alleles,
  repeat_calling_algorithm = "simple",
  assay_size_without_repeat = 87,
  repeat_size = 3
)

plot_traces(test_repeats[1], xlim = c(120, 170))


# use different algorithms to call the repeats to ensure only periodic peaks are called

# fft to automatically find peak period
test_repeats_fft <- call_repeats(
  fragments_list = test_alleles,
  repeat_calling_algorithm = "fft",
  assay_size_without_repeat = 87,
  repeat_size = 3
)

plot_traces(test_repeats_fft[1], xlim = c(120, 170))

# size_period to manually supply the peak period
test_repeats_size_period <- call_repeats(
  fragments_list = test_alleles,
  repeat_calling_algorithm = "size_period",
  repeat_calling_algorithm_size_period = 2.75,
  assay_size_without_repeat = 87,
  repeat_size = 3
)

plot_traces(test_repeats_size_period[1], xlim = c(120, 170))


# Use force_whole_repeat_units algorithm to make sure called
# repeats are the exact number of bp apart

test_repeats_whole_units <- call_repeats(
  fragments_list = test_alleles,
  force_whole_repeat_units = TRUE,
  assay_size_without_repeat = 87,
  repeat_size = 3
)

plot_traces(test_repeats_whole_units[1], xlim = c(120, 170))


}
\seealso{
\code{\link[=find_alleles]{find_alleles()}}, \code{\link[=add_metadata]{add_metadata()}}
}
