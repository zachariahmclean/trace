% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{trace_main}
\alias{trace_main}
\title{Main function for sample processing}
\usage{
trace_main(
  fragments_list,
  metadata_data.frame = NULL,
  index_override_dataframe = NULL,
  ladder_df_list = NULL,
  config_file = NULL,
  ...
)
}
\arguments{
\item{fragments_list}{A list of fragments objects containing fragment data, generated with either \code{\link[=read_fsa]{read_fsa()}}, \code{\link[=size_table_to_fragments]{size_table_to_fragments()}}, \code{\link[=genemapper_table_to_fragments]{genemapper_table_to_fragments()}}, or \code{\link[=repeat_table_to_fragments]{repeat_table_to_fragments()}}.}

\item{metadata_data.frame}{metadata passed to \code{\link[=add_metadata]{add_metadata()}} for grouping samples for metrics calculations or batch correction.}

\item{index_override_dataframe}{index_override_dataframe A data.frame to manually set index peaks. See \code{\link[=assign_index_peaks]{assign_index_peaks()}}.}

\item{ladder_df_list}{a list of dataframes, with the names being the unique id
and the value being a dataframe. The dataframe has two columns, size (indicating
the bp of the standard) and scan (the scan value of the ladder peak). It's
critical that the element name in the list is the unique id of the sample.
Either manually figure out what scan the ladder peaks should be and generate the list, or use \code{\link[=fix_ladders_interactive]{fix_ladders_interactive()}} to interactively generate the ladder_df_list.}

\item{config_file}{The file path to a YAML file containing a full list of parameters. This provides a central place to adjust parameters for the pipeline. Use the following command to make a copy of the YAML file: \code{file.copy(system.file("extdata/trace_config.yaml", package = "trace"), ".")}.}

\item{...}{additional parameters from any of the functions in the pipeline detailed below may be passed to this function. This overwrites values in the \code{config_file}.}
}
\value{
A list of fragments objects ready for calculation of instability metrics using \code{\link[=calculate_instability_metrics]{calculate_instability_metrics()}}
}
\description{
The main function for the trace package that handles processing of samples through the pipeline ready for the calculation of repeat instability metrics.
}
\details{
This function goes through the full pipeline applying the library of functions within this package. To adjust parameters, you can either pass them directing to this function, or you can edit a configuration file and supply it to "config_file".

fsa pipeline: \code{\link[=add_metadata]{add_metadata()}} (only if metadata_data.frame supplied), \code{\link[=find_ladders]{find_ladders()}}, \code{\link[=fix_ladders_manual]{fix_ladders_manual()}} (only if ladder_df_list is supplied), \code{\link[=find_fragments]{find_fragments()}}, \code{\link[=find_alleles]{find_alleles()}}, \code{\link[=call_repeats]{call_repeats()}}, \code{\link[=assign_index_peaks]{assign_index_peaks()}}.

fragments pipeline: \code{\link[=add_metadata]{add_metadata()}} (only if metadata_data.frame supplied), \code{\link[=find_alleles]{find_alleles()}}, \code{\link[=call_repeats]{call_repeats()}}, \code{\link[=assign_index_peaks]{assign_index_peaks()}}.

repeats pipeline: \code{\link[=add_metadata]{add_metadata()}} (only if metadata_data.frame supplied), \code{\link[=find_alleles]{find_alleles()}}, \code{\link[=assign_index_peaks]{assign_index_peaks()}}.
}
\examples{

# import data with read_fsa() to generate an equivalent list to cell_line_fsa_list
fragments_list <- trace_main(cell_line_fsa_list, grouped = TRUE, metadata_data.frame = metadata)
metrics <- calculate_instability_metrics(
  fragments_list = fragments_list,
  peak_threshold = 0.05,
  window_around_index_peak = c(-40, 40),
  percentile_range = c(0.5, 0.75, 0.9, 0.95),
  repeat_range = c(2, 5, 10, 20)
)

}
